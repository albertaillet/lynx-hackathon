# %%
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import evaluation
import matplotlib.pyplot as plt
from tqdm import tqdm

# %%
prices = pd.read_csv('hackathon_prices_dev.csv', index_col='dates', parse_dates=['dates'])

# Compute returns
ret = prices.ffill().diff()

# %%
def minreversion_model(prices: pd.DataFrame, vol_window=50, rev_window=50, boundry1=0.05, boundry2=0.025):

    times = np.arange(rev_window).reshape(-1, 1)
    n_assets = prices.shape[1]
    #boundry = np.ones(n_assets) * boundry
    open = np.zeros(n_assets, dtype=bool)

    def minreversion(price_window, open, boundry1, boundry2):
        model = LinearRegression().fit(times[:-1], price_window[:-1])

        pred = model.predict(np.array([rev_window-1]).reshape(-1, 1))
        actual = price_window[-1]
        diff = ((actual - pred) / actual).flatten()

        pos = (abs(diff) > boundry1) * open * -np.sign(diff) + (abs(diff) < boundry2) * ~open

        open = (abs(diff) > boundry1) * ~open + (abs(diff) < boundry2) * open
        return pos, open

    pos = pd.DataFrame(np.nan, index=prices.index, columns=prices.columns)

    for t in tqdm(range(rev_window + 1, prices.shape[0])):

        price_window = prices.iloc[t-rev_window:t].values

        pos.iloc[t], open = minreversion(price_window, open, boundry1, boundry2)

    return pos

# %%
boundry = 0.05
vol_window = 100
rev_window = 100
pos = minreversion_model(prices, vol_window=vol_window, rev_window=rev_window)
results = evaluation.calc_key_figures(positions=pos, prices=prices)
print(f'vol_window: {vol_window}, rev_window: {rev_window}, boundry: {boundry}')
print(f'Sharpe: {results["sharpe"]}')

# %%
evaluation.plot_key_figures(positions=pos, prices=prices)
# %%
boundry = 0.05
vol_window = 100
rev_window = 100
pos = minreversion_model(prices, vol_window=vol_window, rev_window=rev_window, boundry=boundry)
results = evaluation.calc_key_figures(positions=pos, prices=prices)
print(f'vol_window: {vol_window}, rev_window: {rev_window}, boundry: {boundry}')
print(f'Sharpe: {results["sharpe"]}')
